name: windows-x64-Microsoft C++ Code Analysis

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

env:
  # Path to the CMake build directory.
  build: "${{ github.workspace }}/build"
  VCPKG_ROOT: ${{ github.workspace }}/vcpkg

permissions:
  contents: read

jobs:
  analyze:
    permissions:
      contents: read # for actions/checkout to fetch code
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
      actions: read # only required for a private repository by github/codeql-action/upload-sarif to get the Action run status
    name: Analyze
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Cache vcpkg
        uses: actions/cache@v3
        with:
          key: vcpkg-windows
          path: vcpkg

      - name: Setup vcpkg
        run: |
          git clone https://github.com/microsoft/vcpkg.git || git -C vcpkg pull --ff
          .\vcpkg\bootstrap-vcpkg.bat
          .\vcpkg\vcpkg integrate install

      - name: Setup OpenCppCoverage
        id: setup_opencppcoverage
        run: |
          choco install OpenCppCoverage -y
          echo "C:\Program Files\OpenCppCoverage" >> $env:GITHUB_PATH

      - name: Setup Qt6
        uses: jurplel/install-qt-action@v3
        with:
          version: '6.5.2'
          host: 'windows'
          target: 'desktop'
          arch: 'win64_msvc2019_64'
          dir: '${{ github.workspace }}/qt6/'
          install-deps: 'true'
          cache: 'false'
          cache-key-prefix: 'install-qt-action'
          setup-python: 'true'
          set-env: 'true'
          tools-only: 'false'
          aqtversion: '==3.1.*'
          py7zrversion: '==0.20.*'
          extra: '--external 7z'

      - name: Configure CMake in Debug mode
        run: cmake -S . -B ${{ env.build }} --preset=windows-x64-msvc-shared -DWOLF_FEATURES_ALL=ON
 
      - name: Build CMake in Debug mode
        run: cmake --build ${{ env.build }} --config Debug

      - name: Microsoft C++ Code Analysis Action
        uses: microsoft/msvc-code-analysis-action@v0.1.1
        # Provide a unique ID to access the sarif output path
        id: run-analysis
        with:
          cmakeBuildDirectory: ${{ env.build }}
          buildConfiguration: Debug
          ruleset: NativeRecommendedRules.ruleset
          ignoredTargetPaths: ${{ env.build }}/_deps;${{ env.build }}/_deps/tesseract-src

      - name: Generate Codecov Report
        id: generate_test_report
        shell: cmd
        run: |
          set WOLF_CONTENT_PATH=%CD%/content
          OpenCppCoverage.exe --continue_after_cpp_exception --export_type cobertura:WolfCov.xml --sources %CD% --excluded_sources %CD%\build\_deps -- %CD%\build\Debug\wolf_tests.exe

      - name: Upload Report to Codecov
        uses: codecov/codecov-action@v2
        with:
          files: ./WolfCov.xml
          fail_ci_if_error: true
          functionalities: fix

      # Upload SARIF file to GitHub Code Scanning Alerts
      #- name: Upload SARIF to GitHub
      #  uses: github/codeql-action/upload-sarif@v2
      #  with:
      #    sarif_file: ${{ steps.run-analysis.outputs.sarif }}

      # Upload SARIF file as an Artifact to download and view
      - name: Upload SARIF as an Artifact
        uses: actions/upload-artifact@v3
        with:
          name: sarif-file
          path: ${{ steps.run-analysis.outputs.sarif }}
